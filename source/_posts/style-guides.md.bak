title: 规范
categories:
  - Code
tags:
  - Rx.js
  - Rx
toc: true
date: 2016-11-10 1:12:11
---

### Javascript
- 代码风格
    - [强制] 在 if / else / for / do / while 语句中，即使只有一行，也不得省略块 {...}。

        ```
        // good
        if (condition) {
            callFunc();
        }

        // bad
        if (condition) callFunc();
        if (condition)
            callFunc();
        ```
    - [强制] `变量` 、 `函数` 、`函数参数` 、`类的方法与属性` 使用 Camel命名法。 `var loadingModules = {};`
    - [强制] `常量` 使用 全部字母大写，单词间下划线分隔 的命名方式。 `var HTML_ENTITY = {};`
    - [强制] `类` 使用 Pascal命名法， 即首字母大写的Camel命名法。 `function TextNode(options) {}`
    - [强制] 自定义事件的 `事件名` 必须全小写。
    > 在 JavaScript 广泛应用的浏览器环境，绝大多数 DOM 事件名称都是全小写的。为了遵循大多数 JavaScript 开发者的习惯，在设计自定义事件时，事件名也应该全小写。
    - [强制] 类名 使用 名词。 `function Engine(options) {}`
    - [建议] 函数名 使用 动宾短语。 `function getStyle(element) {}`
    - [建议] boolean 类型的变量使用 is 或 has 开头。`var isReady = false;`
    - [建议] 省略语句结束的分号。
    - [建议] 使用 2 个空格做为一个缩进层级。
    - [建议] `,` 和 `;` 前不允许有空格。`,` 后必须有一个空格。

        ```
        // good
        callFunc(a, b, c);

        // bad
        callFunc(a , b,c) ;
        ```
    - [建议] 在语句的行长度超过 120 时，根据逻辑条件合理缩进。
    - [建议] IIFE 必须在函数表达式外添加 `(`，非 IIFE 不要在函数表达式外添加 `(`。

        ```
        //额外的 ( 能够让代码在阅读的一开始就能判断函数是否立即被调用，进而明白接下来代码的用途。而不是一直拖到底部才恍然大悟。
        // good
        var task = (function () {
           // Code
           return result;
        })();

        // bad
        var task = function () {
            // Code
            return result;
        }();
        ```
- 语言特性
    - [强制] 变量在使用前必须通过 let / const 定义。
    - [强制] 字符串开头和结束使用单引号，存在变量引入时使用反引号，避免使用双引号。
    - [强制] 不允许修改和扩展任何原生对象和宿主对象的原型。

        ```
        // 禁止以下行为
        String.prototype.trim = () => {
        };
        ```
    - [强制] 避免使用直接 `eval` 函数。
    - [建议] 每个 const / let 只能声明一个变量。
    - [建议] 在 Equality Expression 中一律使用类型严格的 ===。仅当判断 null 或 undefined 时，允许使用 == null。
    - [建议] 操作 DOM 时，尽量减少页面 reflow。
    >页面 reflow 是非常耗时的行为，非常容易导致性能瓶颈。下面一些场景会触发浏览器的reflow：
DOM元素的添加、修改（内容）、删除。
应用新的样式或者修改任何影响元素布局的属性。
Resize浏览器窗口、滚动页面。
读取元素的某些属性（offsetLeft、offsetTop、offsetHeight、offsetWidth、scrollTop/Left/Width/Height、clientTop/Left/Width/Height、getComputedStyle()、currentStyle(in IE)) 。
- 拥抱 ESNext
    - [强制] 使用 `let` 全面替代 `var`，常量使用 `const`。
    - [建议] 鼓励使用箭头函数代替 `function` 关键字。
        - 所有的Arrow functions的参数均使用括号()包裹，即便只有一个参数：
        ```
        // Good
        let foo = (x) => x + 1;

        // Bad
        let foo = x => x + 1;
        ```
        - 定义函数尽量使用Arrow functions，而不是function关键字；除非当前场景不合适使用Arrow functions，如函数表达式需要自递归、需要运行时可变的this对象等。
        ```
        // Good
        let foo = () => {
            // code
        };

        // Bad
        function foo() {
            // code
        }

        // Bad
        let foo = function () {
            // code
        }
        ```
    - [建议] 鼓励使用增强的对象字面量。
    ```
    let foo = {
        bar() {
            // code
        }
    };

    let MY_KEY = 'bar';
    let foo = {
        [MY_KEY + 'Hash']: 123
    };
    ```
    - [建议] 鼓励使用模板字符串。
    ```
    let html = `<div>
                    <p>Hello World</p>
                </div>`

    let message = `Hello ${name}, it's ${time} now`;
    ```
    - [建议] 鼓励使用解构赋值来简化代码，但不要在对象解构中使用过深层级。
    ```
    let [foo, bar] = [1, 2];
    let {id, name, children} = getTreeRoot();
    ```
    - [建议] 鼓励使用函数参数增强、 spread 操作符。
    - [建议] 鼓励异步操作均使用 promise / async 实现。
    - [建议] 鼓励使用 class 实现原型继承。
    - [建议] 不使用 Proxy、Reflect 等特性，多数 API 无法被 polyfill。


### HTML
- 代码风格
    - [强制] class 必须单词全字母小写，单词间以 - 分隔。
    - [强制] class 必须代表相应模块或部件的内容或功能，不要以样式信息进行命名。

        ```
        <!-- good -->
        <div class="sidebar"></div>

        <!-- bad -->
        <div class="left"></div>
        ```
    - [强制] 元素 id 必须保证页面唯一。
    - [强制] 同一页面，应避免使用相同的 name 与 id。
    - [强制] 属性名必须使用小写字母。
    - [强制] 属性值必须用双引号包围。

        ```
        <!-- good -->
        <script src="esl.js"></script>

        <!-- bad -->
        <script src='esl.js'></script>
        <script Src=esl.js></script>
        ```
    - [强制] 对于无需自闭合的标签，不允许自闭合。

        ```
        <!-- 常见无需自闭合标签有 input、br、img、hr 等 -->
        <!-- good -->
        <input type="text" name="title">

        <!-- bad -->
        <input type="text" name="title" />
        ```
    - [建议] 使用 2 个空格做为一个缩进层级。
    - [强制] 使用 HTML5 的 doctype 来启用标准模式，建议使用大写的 DOCTYPE。
    - [强制] 有文本标题的控件必须使用 label 标签将其与其标题相关联。
    - [建议] 有下载需求的图片采用 img 标签实现，无下载需求的图片采用 CSS 背景图实现。
        > 产品 logo、用户头像、用户产生的图片等有潜在下载需求的图片，以 img 形式实现，能方便用户下载。
无下载需求的图片，比如：icon、背景、代码使用的图片等，尽可能采用 CSS 背景图实现。

### CSS
- 代码风格
    - [强制] 选择器 与 { 之间必须包含空格。

        ```
        .selector {
        }
        ```
    - [强制] 属性名 与之后的 : 之间不允许包含空格， : 与 属性值 之间必须包含空格。

        ```
        margin: 0;
        ```
    - [强制] 列表型属性值 书写在单行时，, 后必须跟一个空格。

        ```
        font-family: Arial, sans-serif;
        ```
    - [强制] 当一个 rule 包含多个 selector 时，每个选择器声明必须独占一行。

        ```
        /* good */
        .post,
        .page,
        .comment {
            line-height: 1.5;
        }

        /* bad */
        .post, .page, .comment {
            line-height: 1.5;
        }
        ```
    - [强制] 属性选择器中的值必须用双引号包围。

        ```
        article[character="juliet"] {
            voice-family: "Vivien Leigh", victoria, female;
        }
        ```
    - [强制] 属性定义必须另起一行。

        ```
        /* good */
        .selector {
            margin: 0;
            padding: 0;
        }

        /* bad */
        .selector { margin: 0; padding: 0; }
        ```
    - [强制] 属性定义后必须以分号结尾。
    - [建议] 使用 2 个空格做为一个缩进层级。
    - [建议] 当元素需要撑起高度以包含内部的浮动元素时，通过对伪类设置 clear 或触发 BFC 的方式进行 clearfix。尽量不使用增加空标签的方式。
    - [建议] 将 z-index 进行分层，对文档流外绝对定位元素的视觉层级关系进行管理。
    - [建议] 在可控环境下，期望显示在最上层的元素，z-index 指定为 999999。
    - [建议] 在第三方环境下，期望显示在最上层的元素，通过标签内联和 !important，将 z-index 指定为 2147483647。
    - [强制] 需要在 Windows 平台显示的中文内容，其字号应不小于 12px。
    > 由于 Windows 的字体渲染机制，小于 12px 的文字显示效果极差、难以辨认。
    - [建议] line-height 在定义文本段落时，应使用数值。
    > 将 line-height 设置为数值，浏览器会基于当前元素设置的 font-size 进行再次计算。在不同字号的文本段落组合中，能达到较为舒适的行间间隔效果，避免在每个设置了 font-size 都需要设置 line-height。当 line-height 用于控制垂直居中时，还是应该设置成与容器高度一致。
    - [建议] 尽可能在浏览器能高效实现的属性上添加过渡和动画。
    > 在可能的情况下应选择这样四种变换：transform: translate(npx, npx);transform: scale(n);transform: rotate(ndeg);opacity: 0..1;典型的，可以使用 translate 来代替 left 作为动画属性。
    - [建议] 需要添加 hack 时应尽可能考虑是否可以采用其他方式解决。
